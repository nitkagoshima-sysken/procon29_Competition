Visualizerについて話します。
Visualizerで使われるクラス、列挙体、構造体の一覧です。
VisualizerはProgramというクラスを（この中にMain関数があるんだけど）中心にこれらのをクラス、列挙体、構造体を操って動いています。
ボットを作る上でVisualizerの仕組みを理解することは重要です。
なぜなら、ボットはVisualizerのプラグインとして動くからです。
Visualizerがボットとどうやり取りをしていくか理解する必要があります。

それで、Visualizerの中で、ボットに関係する部分とボットに関係しない部分の２つに分かれます。
ボットに関係する部分は、計算部分や、フィールドやエージェントなどのオブジェクトを表すクラスなどで、
ボットに関係しない部分は、描画処理や、QRコードデータの加工などです。

それで、ボットに関係する部分について説明をしていきます。
ボットに関係する部分っていうのは、この黄色いマーカが引かれているやつです。
これらはボットを作る上で理解する必要のあるクラス、列挙体、構造体です。

じゃあ、まずエージェントについて
エージェントクラスはエージェントをそのまま表します。
エージェントが持っているデータ（C#では持っているデータのことを属性っていう）は、エージェントナンバー、名前、エージェントがいる場所、所属チームです。

エージェントアクティビティデータクラスはエージェントが「どこの方向」へ「何をする」のかを表します。
例えば、「右の方向に移動する」とか「左上に置いてあるタイルを取り外す」とかです。
エージェントステータスデータが「移動する」とか「置いてあるタイルを取り外す」とか「何をする」のか動作を格納するための属性で、
ディスティネーションが「右の方向に」とか「左上に」とか方向を表すための属性です。

これは、エージェントナンバー列挙体です。列挙体。
エージェントはチームにつき２人いるので、同じチームの中で、番号を振り分けるためにこの列挙体があります。

次がAgentStatusCode列挙体
全部で36個あります。
これは、さっき説明した、「エージェントアクティビティデータクラスはエージェントが「どこの方向」へ「何をする」のかを表す」の「何をする」部分です。
AgentStatusCode列挙体を使って、何をするのかを表します。
AgentStatusCode列挙体では、３種類に分けることができます。
「リクエスト」「成功」「失敗」の３種類です。
「リクエスト」っていうのは、ボットとかが右上に「移動したい」ってVisualizerに伝えるときに使います。
それで移動に成功したときは成功しましたよ、ってVisualizerがボットにあとで教えます。
逆に移動に失敗したときは失敗しましたよ、ってVisualizerがボットにあとで教えます。
だからボットを作るときに覚えるべきなのは、「リクエスト」の部分だけ。
成功したかとかどう失敗したかとかはAgentStatusCode列挙体についてGitHubのWikiに一覧が書いてあるので、そちらを見てください。
ちなみに、「リクエスト」「成功」「失敗」はこんな感じに分布してます。
「失敗」の種類がやたら多いのは、どのようにして失敗したか細かく書いてあるからです。
例えば、エージェントがフィールドの右端にいるのに、右に行きたいっていう「リクエスト」を送ったときは、
VisualizerがFailedInMovingByTryingToGoOutOfTheFieldWithEachOtherっていう失敗を意味するコードが返されます。
ちなみに、このAgentStatusCode列挙体はHTTPステータスコードを模倣して作りました。
HTTPステータスコードっていうのは404 Not Foundとかのやつです。
HTTPステータスコードも「成功」「失敗」「リクエスト」って種類に分けられます。
AgentStatusCode列挙体も同じ感じです。

次、Arrow列挙体について
これはそのまま８方向の矢印を表します。
そのままです。

Calcクラスについて
これは名前の通り計算してくれるクラスです。
例えば、フィールド上でエージェントが次のターンで右上に動くときにどうなるのか計算してくれます。
Calcクラスが持っている属性は、
エージェントアーリー、これはエージェントがフィールド上に合計４人いるのでそれを管理するための配列です。
エージェンつ、これもエージェントの配列みたいなものです。
フィールド、これはフィールドを表すためのクラスです。
フィールドヒストリー、これは例えば10ターン目のとき、前のターン（９ターン目）から最初のターン（１ターン）目がどうだったかを記録する、
まさにフィールドヒストリーです。
フィールドリスト、これはフィールドをリストにしてくます。細かいことは教えませんが、C#には「リスト」っていう便利な機能があります。それに変換するための属性です。
MaxTurn、これは試合の最大ターン数です。
TeamArray、チームの配列です。フィールドには２つのチームがあります。これを配列で管理しています。
Turn、これはそのまま現在のターンが何ターン目であるかを示します。
例えば、100ターン中、現在９０ターン目で、あと10ターンでゲーム終了のとき、
MaxTurnが100で、Turnが10です。

次、セルクラス。
セルクラスは、フィールド上のマスひとつひとつを表します。
持っている属性は４つ
コーディネート、これはフィールド上のどこのマスかを表す座標です。
IsEnclosedはこのマスが周りをタイルで囲まれているかを表します。
IsTileOnはこのマスの上にタイルが置かれているかを表します。
Pointはこのマスのポイント、得点がいくつを表します。
例えば、このタイルは12点なので、Pointは12です。

フィールドクラス。
さっきのセルクラスが集まってフィールドになります。
それがCellsです。
フィールドには幅と高さがあります。
それがHeightとWidthです。
IsHorizonatallySymmetricalはフィールドが左右対称かどうかを表します
IsVerticallySymmetricalはフィールドが上下対称かどうかを表します

チーム列挙体
これは試合は２チームが対戦します。
これをAチームとBチームと名付けて管理するためにある列挙体です。

TurnDataクラス
これは、一回のターンでどのエージェントがどういう方向に対して、どういう行動を起こすのかをまとめたデータを表します。
